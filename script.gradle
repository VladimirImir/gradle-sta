import java.time.LocalDate

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.1.1/samples
 */

//println "configuration phase"
//println "gradle id: ${gradle.hashCode()}"
//println "root: ${rootProject.hashCode()}, ${project.hashCode()}, ${gradle.rootProject.hashCode()}"

// task = new DefaultTask
// Вариант # 3 - Является предпочтительным.
//def map = [description: "Hello task", group: "dev"]
/*task(map, "hello") {
    println "configuration phase. Task hello"
    println "task: $description, group: $group, actions: ${actions.size()}"
}*/
// Project -> [Task1, Task2]
// Task -> {Action1, Action2] -> action.execution (execution phase)

ext {
    javaVersion = 16
    currentDate = LocalDate.now()
}

println ext.javaVersion
println project.ext.javaVersion
println javaVersion
println project.javaVersion
//println project.'projectParam1'
println "---- All properties:"
println project.properties
println "---- System: "
println System.getProperty("sys.example")



task first {
    doLast {
        println "Task 1"
    }
}
task second {
    doLast {
        println "Task 2"
    }
}
task third {
    doLast {
        println "Task 3"
    }
}
task fourth(group: "dev") {
    doLast {
        println "Task 4"
    }
}

// 2 <--- 4

/*fourth.dependsOn second
second.dependsOn first
second.finalizedBy third*/

// 2
// 1    4
// 3
fourth.dependsOn first
fourth.dependsOn second
fourth.dependsOn third

first.mustRunAfter second
//second.shouldRunAfter first

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    println "----- Graph:"
    graph.allTasks.each {
        println "${it.name}"
    }
}

gradle.taskGraph.beforeTask { Task task ->
    if (task.group == 'dev') {
        println "beforeTask callBack $task"
    }
}
gradle.taskGraph.afterTask { Task task ->
    if (task.name == 'first') {
        println "afterTask callBack $task"
    }
}

defaultTasks "fourth"





//tasks.findByName("hello").
// Вариант # 1
/*hello.description = "Hello task"
hello.group = "dev"*/

// Вариант # 2
// hello.configure Closure
/*hello {
    println "configuration phase. Task hello"
    description = "Hello task"
    group = "dev"
}*/

